generator client {
  provider = "prisma-client-js"
}

// how to quickly connect the Postgres database provided by Supabase to a Prisma project.
// https://supabase.com/partners/integrations/prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Contractor {
  id                Int  @id @default(autoincrement())
  createdAt         DateTime @default(now())
  createdBy         String
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  entityType        String?
  isPrefixEntityType  Boolean?
  name              String
  title             String?
  representative    String?
  tradeName         String?
  postalCode        String
  prefecture        String
  city              String
  town              String
  address           String
  address2          String?
  mswLicenses       MswLicense[]
  industrialWasteLicenses IndustrialWasteLicense[]
}

model Client {
  id                Int  @id @default(autoincrement())
  createdAt         DateTime @default(now())
  createdBy         String
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  entityType        String?
  isPrefixEntityType  Boolean?
  name              String
  title             String?
  representative    String?
  tradeName         String?
  postalCode        String
  prefecture        String
  city              String
  town              String
  address           String
  address2          String?
  sites             Site[]
}

model Site {
  id                Int @id @default(autoincrement())
  createdAt         DateTime @default(now())
  createdBy         String
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  clientId          Int
  client            Client @relation(fields: [clientId], references: [id])
  name              String
  postalCode        String
  prefecture        String
  city              String
  town              String
  address           String
  address2          String?
}

model Prefecture {
  id         Int    @id
  name       String
  municipalities  Municipality[]
}

model Municipality {
  id              Int     @id
  prefectureId    Int
  prefecture Prefecture @relation(fields: [prefectureId], references: [id], onDelete: Cascade)
  name            String
  mswLicenses     MswLicense[]
}

model MswLicense {
  id                Int @id @default(autoincrement())
  createdAt         DateTime @default(now())
  createdBy         String
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  contractorId      Int
  contractor        Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  municipalityId    Int
  municipality      Municipality @relation(fields: [municipalityId], references: [id])
  type              Int
  expirationDate    DateTime  @db.Date
  licenseUrl        String

  @@unique([contractorId, municipalityId, type])
}

model IndustrialWasteCategory {
  id            Int @id
  name          String
  industrialWasteLicenses IndustrialWasteLicense[]
}

model IndustrialWasteLicense {
  id                Int @ id @default(autoincrement())
  createdAt         DateTime @default(now())
  createdBy         String
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  contractorId      Int
  contractor        Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  issuingAuthority  Int
  typeCode          Int
  authorityCode     Int
  contractorCode    Int
  expirationDate    DateTime  @db.Date
  licenseUrl        String
  licensedCategories  IndustrialWasteCategory[]

  @@unique([issuingAuthority, typeCode, authorityCode, contractorCode])
}
